# -*- coding: utf-8 -*-
"""ESGCODE.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pm_1Q7LM7RwfwwXDKHT1EY9hmRLqpU_Y
"""

!pip install mxnet
!pip install gluonnlp pandas tqdm
!pip install sentencepiece
!pip install transformers==3.0.2
!pip install torch

!pip install 'git+https://github.com/SKTBrain/KoBERT.git#egg=kobert_tokenizer&subdirectory=kobert_hf'

score=0

!pip install git+https://git@github.com/SKTBrain/KoBERT.git@master

import torch
from torch import nn
import torch.nn.functional as F
import torch.optim as optim
from torch.utils.data import Dataset, DataLoader
import gluonnlp as nlp
import numpy as np
from tqdm import tqdm, tqdm_notebook
import pandas as pd

#kobert
from kobert.utils import get_tokenizer
from kobert.pytorch_kobert import get_pytorch_kobert_model
from kobert_tokenizer import KoBERTTokenizer

#transformers
from transformers import AdamW
from transformers.optimization import get_cosine_schedule_with_warmup
from transformers import BertModel

#GPU 사용
device = torch.device("cuda:0")
#BERT 모델, Vocabulary 불러오기
tokenizer = KoBERTTokenizer.from_pretrained('skt/kobert-base-v1')
bertmodel, vocab = get_pytorch_kobert_model()

df = pd.read_csv('mergedabc.csv', encoding='utf-8')
df.drop_duplicates(subset = None,keep='first',inplace=False,ignore_index=False)

df["review"]=df["review"].str.replace(pat=r'[^\w]',repl=r' ',regex=True)
df["review"]
df

data =df.drop_duplicates("review")

data

class BERTDataset(Dataset):
    def __init__(self, dataset, sent_idx, label_idx, bert_tokenizer,vocab, max_len,
                 pad, pair):
   
        transform = nlp.data.BERTSentenceTransform(
            bert_tokenizer, max_seq_length=max_len,vocab=vocab, pad=pad, pair=pair)
        
        self.sentences = [transform([i[sent_idx]]) for i in dataset]
        self.labels = [np.int32(i[label_idx]) for i in dataset]

    def __getitem__(self, i):
        return (self.sentences[i] + (self.labels[i], ))
         

    def __len__(self):
        return (len(self.labels))

data_list = []
for ques, label in zip(data['review'], data['sentiment'])  :
    data = []   
    data.append(ques)
    data.append(str(label))

    data_list.append(data)

data_list

# Setting parameters
max_len = 64
batch_size = 64
warmup_ratio = 0.1
num_epochs = 10
max_grad_norm = 1
log_interval = 200
learning_rate =  5e-5

#train & test 데이터로 나누기
from sklearn.model_selection import train_test_split

dataset_train, dataset_test = train_test_split(data_list, test_size=0.2, shuffle=True, random_state=34)

tok=tokenizer.tokenize
data_train = BERTDataset(dataset_train, 0, 1, tok, vocab, max_len, True, False)
data_test = BERTDataset(dataset_test,0, 1, tok, vocab,  max_len, True, False)

train_dataloader = torch.utils.data.DataLoader(data_train, batch_size=batch_size, num_workers=5)
test_dataloader = torch.utils.data.DataLoader(data_test, batch_size=batch_size, num_workers=5)

class BERTClassifier(nn.Module):
    def __init__(self,
                 bert,
                 hidden_size = 768,
                 num_classes=7,   ##클래스 수 조정##
                 dr_rate=None,
                 params=None):
        super(BERTClassifier, self).__init__()
        self.bert = bert
        self.dr_rate = dr_rate
                 
        self.classifier = nn.Linear(hidden_size , num_classes)
        if dr_rate:
            self.dropout = nn.Dropout(p=dr_rate)
    
    def gen_attention_mask(self, token_ids, valid_length):
        attention_mask = torch.zeros_like(token_ids)
        for i, v in enumerate(valid_length):
            attention_mask[i][:v] = 1
        return attention_mask.float()

    def forward(self, token_ids, valid_length, segment_ids):
        attention_mask = self.gen_attention_mask(token_ids, valid_length)
        
        _, pooler = self.bert(input_ids = token_ids, token_type_ids = segment_ids.long(), attention_mask = attention_mask.float().to(token_ids.device),return_dict=False)
        if self.dr_rate:
            out = self.dropout(pooler)
        return self.classifier(out)

device = torch.device("cuda:0")

#BERT 모델 불러오기
model = BERTClassifier(bertmodel,  dr_rate=0.5).to(device)
 
#optimizer와 schedule 설정
no_decay = ['bias', 'LayerNorm.weight']
optimizer_grouped_parameters = [
    {'params': [p for n, p in model.named_parameters() if not any(nd in n for nd in no_decay)], 'weight_decay': 0.01},
    {'params': [p for n, p in model.named_parameters() if any(nd in n for nd in no_decay)], 'weight_decay': 0.0}
]

optimizer = AdamW(optimizer_grouped_parameters, lr=learning_rate)
loss_fn = nn.CrossEntropyLoss() # 다중분류를 위한 대표적인 loss func

t_total = len(train_dataloader) * num_epochs
warmup_step = int(t_total * warmup_ratio)

scheduler = get_cosine_schedule_with_warmup(optimizer, num_warmup_steps=warmup_step, num_training_steps=t_total)

#정확도 측정을 위한 함수 정의
def calc_accuracy(X,Y):
    max_vals, max_indices = torch.max(X, 1)
    train_acc = (max_indices == Y).sum().data.cpu().numpy()/max_indices.size()[0]
    return train_acc
    
train_dataloader

train_history=[]
test_history=[]
loss_history=[]
for e in range(num_epochs):
    train_acc = 0.0
    test_acc = 0.0
    model.train()
    for batch_id, (token_ids, valid_length, segment_ids, label) in enumerate(tqdm_notebook(train_dataloader)):
        optimizer.zero_grad()
        token_ids = token_ids.long().to(device)
        segment_ids = segment_ids.long().to(device)
        valid_length= valid_length
        label = label.long().to(device)
        out = model(token_ids, valid_length, segment_ids)
         
        #print(label.shape,out.shape)
        loss = loss_fn(out, label)
        loss.backward()
        torch.nn.utils.clip_grad_norm_(model.parameters(), max_grad_norm)
        optimizer.step()
        scheduler.step()  # Update learning rate schedule
        train_acc += calc_accuracy(out, label)
        if batch_id % log_interval == 0:
            print("epoch {} batch id {} loss {} train acc {}".format(e+1, batch_id+1, loss.data.cpu().numpy(), train_acc / (batch_id+1)))
            train_history.append(train_acc / (batch_id+1))
            loss_history.append(loss.data.cpu().numpy())
    print("epoch {} train acc {}".format(e+1, train_acc / (batch_id+1)))
    #train_history.append(train_acc / (batch_id+1))
    
    model.eval()
    for batch_id, (token_ids, valid_length, segment_ids, label) in enumerate(tqdm_notebook(test_dataloader)):
        token_ids = token_ids.long().to(device)
        segment_ids = segment_ids.long().to(device)
        valid_length= valid_length
        label = label.long().to(device)
        out = model(token_ids, valid_length, segment_ids)
        test_acc += calc_accuracy(out, label)
    print("epoch {} test acc {}".format(e+1, test_acc / (batch_id+1)))
    test_history.append(test_acc / (batch_id+1))

def scoresum(score) :
  global scoresumprint

  scoresumprint += score

def one(t):
  global on
  on += t
def two(y):
  global tw
  tw += y
def three(c):
  global th
  th += c

def FOUR(t):
  global on
  fo += t
def FIVE(y):
  global tw
  fi += y
def SIX(c):
  global th
  si += c

def SEVEN(t):
  global on
  se += t
def EIGTH(y):
  global tw
  ei += y
def NINE(c):
  global th
  ni += c

scoresumprint = 0

def predict(predict_sentence):
    data = [predict_sentence, '0']
    dataset_another = [data]

    another_test = BERTDataset(dataset_another, 0, 1, tok, vocab, max_len, True, False)
    test_dataloader = torch.utils.data.DataLoader(another_test, batch_size=batch_size, num_workers=5)
    
    model.eval()

    for batch_id, (token_ids, valid_length, segment_ids, label) in enumerate(test_dataloader):
        token_ids = token_ids.long().to(device)
        segment_ids = segment_ids.long().to(device)

        valid_length= valid_length
        label = label.long().to(device)

        out = model(token_ids, valid_length, segment_ids)

        
        test_eval=[]
        for i in out:
            logits=i
            logits = logits.detach().cpu().numpy()

            if np.argmax(logits) == 0:
                test_eval.append(" Greenwashing indifference")
                scoresum(np.argmax(logits))
                one(1)
            elif np.argmax(logits) == 1:
                test_eval.append(" a general connection to greenwashing ")
                scoresum(np.argmax(logits))
                two(1)
            elif np.argmax(logits) == 2:
                test_eval.append(" an intense connection to greenwashing ")
                scoresum(np.argmax(logits))
                three(1)
                

        print(">> Detected " + test_eval[0] + " from your input. ")
        print(np.argmax(logits))



def predictE(predict_sentence):
    data = [predict_sentence, '0']
    dataset_another = [data]

    another_test = BERTDataset(dataset_another, 0, 1, tok, vocab, max_len, True, False)
    test_dataloader = torch.utils.data.DataLoader(another_test, batch_size=batch_size, num_workers=5)
    
    model.eval()

    for batch_id, (token_ids, valid_length, segment_ids, label) in enumerate(test_dataloader):
        token_ids = token_ids.long().to(device)
        segment_ids = segment_ids.long().to(device)

        valid_length= valid_length
        label = label.long().to(device)

        out = model(token_ids, valid_length, segment_ids)

        
        test_eval=[]
        for i in out:
            logits=i
            logits = logits.detach().cpu().numpy()

            if np.argmax(logits) == -1:
                test_eval.append("ESG 중 E등급 나쁨")
                scoresum(np.argmax(logits))
                one(1)
            elif np.argmax(logits) == 0:
                test_eval.append("ESG 중 E등급 보통")
                scoresum(np.argmax(logits))
                two(1)
            elif np.argmax(logits) == 1:
                test_eval.append("ESG 중 E등급 좋음")
                scoresum(np.argmax(logits))
                three(1)
                continue
                

        print(">> 입력하신 내용에서 " + test_eval[0] + " 감지.")
        print(np.argmax(logits))

def predictS(predict_sentence):
    data = [predict_sentence, '0']
    dataset_another = [data]

    another_test = BERTDataset(dataset_another, 0, 1, tok, vocab, max_len, True, False)
    test_dataloader = torch.utils.data.DataLoader(another_test, batch_size=batch_size, num_workers=5)
    
    model.eval()

    for batch_id, (token_ids, valid_length, segment_ids, label) in enumerate(test_dataloader):
        token_ids = token_ids.long().to(device)
        segment_ids = segment_ids.long().to(device)

        valid_length= valid_length
        label = label.long().to(device)

        out = model(token_ids, valid_length, segment_ids)

        
        test_eval=[]
        for i in out:
            logits=i
            logits = logits.detach().cpu().numpy()

            if np.argmax(logits) == -2:
                test_eval.append("ESG 중 S등급 나쁨")
                scoresum(np.argmax(logits))
                FOUR(1)
            elif np.argmax(logits) == 0:
                test_eval.append("ESG 중 S등급 보통")
                scoresum(np.argmax(logits))
                FIVE(1)
            elif np.argmax(logits) == 2:
                test_eval.append("ESG 중 S등급 좋음")
                scoresum(np.argmax(logits))
                SIX(1)
                continue
                

        print(">> 입력하신 내용에서 " + test_eval[0] + " 감지.")
        print(np.argmax(logits))

def predictG(predict_sentence):
    data = [predict_sentence, '0']
    dataset_another = [data]

    another_test = BERTDataset(dataset_another, 0, 1, tok, vocab, max_len, True, False)
    test_dataloader = torch.utils.data.DataLoader(another_test, batch_size=batch_size, num_workers=5)
    
    model.eval()

    for batch_id, (token_ids, valid_length, segment_ids, label) in enumerate(test_dataloader):
        token_ids = token_ids.long().to(device)
        segment_ids = segment_ids.long().to(device)

        valid_length= valid_length
        label = label.long().to(device)

        out = model(token_ids, valid_length, segment_ids)

        
        test_eval=[]
        for i in out:
            logits=i
            logits = logits.detach().cpu().numpy()

            if np.argmax(logits) == -3:
                test_eval.append("그린워싱 무관")
                scoresum(np.argmax(logits))
                SEVEN(1)
            elif np.argmax(logits) == 0:
                test_eval.append("그린워싱 보통")
                scoresum(np.argmax(logits))
                EIGHT(1)
            elif np.argmax(logits) == 3:
                test_eval.append("그린워싱 강력")
                scoresum(np.argmax(logits))
                NINE(1)
                continue
                

        print(">> 입력하신 내용에서 " + test_eval[0] + " 감지.")
        print(np.argmax(logits))

#end = 1
#while end == 1 :
   # sentence = input("하고싶은 말을 입력해주세요 : ")
   # if sentence == "0" :
    #    break
  #  predict(sentence)
  #  print("\n")

from bs4 import BeautifulSoup
import requests
import csv

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

import pandas as pd
import numpy as np
#검색어 입력
a1= ['그린워싱','친환경']
search = input("기업명을 입력하세요:")
# ConnectionError방지
headers = { "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) Chrome/100.0.48496.75" }
page_num = 1
print("크롤링할 페이지: ",page_num,"페이지")
b1 =[3]
score=[]
long=[]
scoresumprint = 0
on =0
tw =0
th =0
fo =0
fi =0
si =0
se =0
ei =0
ni =0


for i in a1:
  news_title = []

  #url 생성
  
  
  url = "https://search.naver.com/search.naver?where=news&sm=tab_pge&query=" + search+str(i) + "&start=" + str(page_num)
  #print("생성url: ",url)
  #html불러오기
  original_html = requests.get(url, headers=headers)
  html = BeautifulSoup(original_html.text, "html.parser")
  articles = html.select("div.group_news > ul.list_news > li div.news_area > a")
  #print(articles)
  for i in articles:  
    news_title=(i.attrs['title'])
    #end = 1
    #while end == 1 :
    print(news_title)
    sentence = news_title
    if sentence == "0" :
      break
    predictE(sentence)
    predictS(sentence)
    predictG(sentence)

    print("\n")

print(scoresumprint)
e=on*-1+th*1
s=fo*-1+si*1
g=se*-1+ni*1

print(e)
print(s)
print(g)

!pip install matplotlib

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns
sns.set()
import pandas as pd

sns.pairplot(data=df)
plt.show()

if scoresumprint>24:
  print("그린워싱이 강력합니다.")
elif 10<scoresumprint<24:
  print("그린워싱이 보통입니다.")
elif scoresumprint<9:
  print("그린워싱과 무관합니다.")

import matplotlib.pyplot as plt

fig,ax = plt.subplots()
ax.plot(scoresumprint)

x = np.arange(0,3)
y = [on,tw,th]
plt.title("그린워싱 시각화",fontsize=16)
plt.xlabel("그린워싱 감지지수",fontsize=12)
plt.ylabel("그린워싱 감지지수 갯수",fontsize=12)

plt.bar(x,y)
plt.show()

colors = ['yellowgreen', 'gold', 'lightskyblue', 'lightcoral']
plt.title("Pie Chart")
explode = (0,0,0.2)
plt.pie(y,explode=explode,labels=x,colors=colors, autopct='%1.1f%%', shadow=True, startangle=90)
plt.show

x = np.arange(0,3)
y = [e,s,g]
plt.title("esg 시각화",fontsize=16)
plt.xlabel("esg 감지지수",fontsize=12)
plt.ylabel("esg 감지지수 갯수",fontsize=12)

colors = ['yellowgreen', 'gold', 'lightskyblue']
plt.title("Pie Chart")
explode = (0,0,0)
plt.pie(y,explode=explode,labels=x,colors=colors, autopct='%1.1f%%', shadow=True, startangle=90)
plt.show

df.plot(kind='hist',y="sentiment")

